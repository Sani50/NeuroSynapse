pip install dash plotly pandas numpy
pip install joblib dash plotly numpy pandas
import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.graph_objs as go
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from collections import deque
import joblib

# Load your Random Forest model
rf_model = joblib.load("rf_model")  # Ensure the correct path
scaler = joblib.load("scaler")     # Ensure the correct path

# Simulate EEG Data (Replace this with real-time EEG signal fetching)
def get_eeg_data():
    # Generate random data of the same feature size as the training data
    num_features = scaler.mean_.shape[0]  # Get the number of features from the scaler
    return np.random.uniform(-100, 100, size=(1, num_features))

# Predict seizure risk level using the trained model
def predict_seizure_risk(eeg_data):
    scaled_data = scaler.transform(eeg_data)  # Scale the input
    prediction = rf_model.predict(scaled_data)  # Predict using the trained model
    risk_levels = {0: "Low", 1: "High"}  # Adjust according to your dataset's labels
    return risk_levels.get(prediction[0], "Unknown")

# Dashboard Buffers
time_window = 100  # Rolling window size
num_channels = 5  # Number of channels to visualize
time_series = deque(maxlen=time_window)
channel_data = [deque(maxlen=time_window) for _ in range(num_channels)]
risk_levels = deque(maxlen=time_window)

# Initialize with dummy data
for i in range(time_window):
    time_series.append(i)
    for ch in range(num_channels):
        channel_data[ch].append(0)  # Default to zero
    risk_levels.append("Low")

# Create Dash app
app = dash.Dash(__name__)
app.layout = html.Div([
    html.H1("Real-Time EEG Seizure Prediction", style={'text-align': 'center'}),

    # EEG Signal Graph
    dcc.Graph(id="eeg-graph", style={'height': '60vh'}),

    # Risk Level Indicator
    html.Div([
        html.H3("Seizure Risk Level:", style={'text-align': 'center'}),
        html.Div(id="risk-level", style={
            'text-align': 'center',
            'font-size': '30px',
            'padding': '20px',
            'color': 'white',
            'background-color': 'green',
            'border-radius': '10px',
            'width': '50%',
            'margin': '0 auto'
        }),
    ]),

    # Interval for real-time updates
    dcc.Interval(id="update-interval", interval=1000, n_intervals=0)  # Update every second
])

# Callback for updating the dashboard
@app.callback(
    [Output("eeg-graph", "figure"), Output("risk-level", "children"), Output("risk-level", "style")],
    [Input("update-interval", "n_intervals")]
)
def update_dashboard(n):
    eeg_data = get_eeg_data()  # Fetch new EEG data
    risk_level = predict_seizure_risk(eeg_data)  # Predict seizure risk

    # Append new data
    time_series.append(time_series[-1] + 1)
    for ch in range(num_channels):
        channel_data[ch].append(eeg_data[0, ch])  # Visualize the first `num_channels` features
    risk_levels.append(risk_level)

    # Color map for risk levels
    risk_colors = {"Low": "green", "High": "red"}

    # Create EEG plot with multiple channels
    eeg_figure = {
        "data": [
            go.Scatter(x=list(time_series), y=list(channel_data[ch]), mode='lines', name=f"Channel {ch+1}")
            for ch in range(num_channels)
        ],
        "layout": go.Layout(
            title="EEG Signals",
            xaxis={"title": "Time"},
            yaxis={"title": "Amplitude (ÂµV)"},
            showlegend=True
        )
    }

    # Update risk level style
    risk_style = {
        'text-align': 'center',
        'font-size': '30px',
        'padding': '20px',
        'color': 'white',
        'background-color': risk_colors.get(risk_level, "gray"),
        'border-radius': '10px',
        'width': '50%',
        'margin': '0 auto'
    }

    return eeg_figure, risk_level, risk_style

if __name__ == "__main__":
    app.run_server(debug=True)
